package sqlutil;

import org.springframework.jdbc.support.KeyHolder;

import java.sql.*;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;

public class SqlUtil {

    private SqlUtil() {
    }

    public static PreparedStatement createStatement(Connection connection, String sql, Object... params) throws SQLException {
        PreparedStatement stmt = connection.prepareStatement(sql);
        setParams(stmt, params);
        return stmt;
    }

    public static PreparedStatement createStatement(Connection connection, int autoGeneratedKeys, String sql, Object... params) throws SQLException {
        PreparedStatement stmt = connection.prepareStatement(sql, autoGeneratedKeys);
        setParams(stmt, params);
        return stmt;
    }

    private static void setParams(PreparedStatement stmt, Object[] params) throws SQLException {
        for (int i = 1; i < params.length + 1; i++) {
            Object param = params[i - 1];
            if (param instanceof String s) {
                stmt.setString(i, s);
            } else if (param instanceof Integer j) {
                stmt.setInt(i, j);
            } else if (param instanceof Long l) {
                stmt.setLong(i, l);
            } else if (param instanceof Double d) {
                stmt.setDouble(i, d);
            } else if (param instanceof LocalDate date) {
                stmt.setDate(i, Date.valueOf(date));
            } else if (param instanceof LocalDateTime dateTime) {
                stmt.setTimestamp(i, Timestamp.valueOf(dateTime));
            } else if (param instanceof LocalTime time) {
                stmt.setTime(i, Time.valueOf(time));
            } else {
                throw new IllegalArgumentException(String.format("Invalid param type at index %d: %s", i, param.getClass().getName()));
            }
        }
    }

    public static long getKey(KeyHolder keyHolder) {
        Number key = keyHolder.getKey();
        if (key != null) return key.longValue();
        throw new IllegalStateException("No key has been generated");
    }
}
